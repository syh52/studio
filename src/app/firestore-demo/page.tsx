'use client';

import { useState, useEffect } from 'react';
import { 
  addLexiconEntry, 
  getAllVocabulary, 
  subscribeToVocabulary,
  deleteVocabulary,
  type VocabularyEntry 
} from '@/lib/firebase';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Trash2, Plus } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

export default function FirestoreDemoPage() {
  const [vocabulary, setVocabulary] = useState<VocabularyEntry[]>([]);
  const [term, setTerm] = useState('');
  const [definition, setDefinition] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  // 设置实时监听
  useEffect(() => {
    const unsubscribe = subscribeToVocabulary((updatedVocabulary) => {
      console.log('📝 词汇库更新:', updatedVocabulary);
      setVocabulary(updatedVocabulary);
    });

    // 清理函数
    return () => unsubscribe();
  }, []);

  // 添加新词汇
  const handleAddVocabulary = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!term || !definition) return;

    setIsLoading(true);
    const result = await addLexiconEntry(term, definition, {
      category: 'Aviation',
      difficulty: 'intermediate'
    });

    if (result.success) {
      toast({
        title: '添加成功',
        description: `词汇 "${term}" 已添加到数据库`,
        className: 'bg-green-600 text-white border-green-700'
      });
      setTerm('');
      setDefinition('');
    } else {
      toast({
        title: '添加失败',
        description: '请检查您的网络连接和 Firebase 配置',
        variant: 'destructive'
      });
    }
    setIsLoading(false);
  };

  // 删除词汇
  const handleDelete = async (id: string, termName: string) => {
    const result = await deleteVocabulary(id);
    
    if (result.success) {
      toast({
        title: '删除成功',
        description: `词汇 "${termName}" 已从数据库删除`,
      });
    } else {
      toast({
        title: '删除失败',
        description: '请稍后重试',
        variant: 'destructive'
      });
    }
  };

  // 添加示例数据
  const addExampleData = async () => {
    const examples = [
      {
        term: "Aerodynamics",
        definition: "The study of the properties of moving air and the interaction between the air and solid bodies moving through it.",
        category: "Physics"
      },
      {
        term: "Thrust",
        definition: "The force which moves an aircraft through the air. Thrust is generated by the propulsion system of the aircraft.",
        category: "Physics"
      },
      {
        term: "Lift",
        definition: "The force that directly opposes the weight of an airplane and holds the airplane in the air.",
        category: "Physics"
      },
      {
        term: "Drag",
        definition: "The aerodynamic force that opposes an aircraft\'s motion through the air.",
        category: "Physics"
      }
    ];

    setIsLoading(true);
    for (const example of examples) {
      await addLexiconEntry(example.term, example.definition, {
        category: example.category,
        difficulty: 'intermediate'
      });
    }
    setIsLoading(false);
    
    toast({
      title: '示例数据已添加',
      description: '已添加4个航空术语到数据库',
      className: 'bg-green-600 text-white border-green-700'
    });
  };

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold text-white mb-8">Firestore 实时数据演示</h1>
      
      {/* 添加词汇表单 */}
      <Card className="glass-card">
        <CardHeader>
          <CardTitle>添加新词汇</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleAddVocabulary} className="space-y-4">
            <div>
              <Input
                placeholder="术语 (如: Altitude)"
                value={term}
                onChange={(e) => setTerm(e.target.value)}
                className="glass-card"
                required
              />
            </div>
            <div>
              <Textarea
                placeholder="定义 (如: The height of an aircraft above a reference point...)"
                value={definition}
                onChange={(e) => setDefinition(e.target.value)}
                className="glass-card"
                rows={3}
                required
              />
            </div>
            <div className="flex gap-2">
              <Button 
                type="submit" 
                disabled={isLoading || !term || !definition}
                className="gradient-primary"
              >
                <Plus className="h-4 w-4 mr-2" />
                添加词汇
              </Button>
              <Button 
                type="button"
                onClick={addExampleData}
                disabled={isLoading}
                variant="outline"
                className="glass-card"
              >
                添加示例数据
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>

      {/* 词汇列表 */}
      <Card className="glass-card">
        <CardHeader>
          <CardTitle>
            词汇库 ({vocabulary.length} 个词汇)
            <span className="text-sm font-normal text-gray-400 ml-2">
              实时同步更新
            </span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          {vocabulary.length === 0 ? (
            <p className="text-gray-400 text-center py-8">
              暂无词汇。添加您的第一个航空术语吧！
            </p>
          ) : (
            <div className="space-y-3">
              {vocabulary.map((entry) => (
                <div 
                  key={entry.id}
                  className="glass-card rounded-lg p-4 hover:bg-white/10 transition-colors"
                >
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <h3 className="font-semibold text-white mb-1">{entry.term}</h3>
                      <p className="text-sm text-gray-300">{entry.definition}</p>
                      {entry.category && (
                        <span className="inline-block mt-2 px-2 py-1 bg-purple-500/20 text-purple-300 text-xs rounded">
                          {entry.category}
                        </span>
                      )}
                    </div>
                    <Button
                      size="icon"
                      variant="ghost"
                      onClick={() => handleDelete(entry.id!, entry.term)}
                      className="text-gray-400 hover:text-red-400 ml-4"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* 说明 */}
      <Card className="glass-card border-blue-500/30">
        <CardHeader>
          <CardTitle className="text-blue-300">🔥 Firestore 实时功能演示</CardTitle>
        </CardHeader>
        <CardContent className="text-sm text-gray-300 space-y-2">
          <p>
            这个页面展示了 Firestore 的实时同步功能。当您添加、修改或删除词汇时，
            所有打开这个页面的用户都会立即看到更新，无需刷新页面！
          </p>
          <p>
            试试在两个浏览器窗口中打开这个页面，然后在其中一个窗口添加词汇，
            您会看到另一个窗口立即显示新词汇。
          </p>
          <p className="text-yellow-400">
            注意：需要配置真实的 Firebase 项目才能使用这些功能。
          </p>
        </CardContent>
      </Card>
    </div>
  );
} 